name: CI
on:
  pull_request:
  release:
    types: [published]
  push:
    branches:
      - main
      - ci

env:
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"

jobs:
  Test:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
        compiler:
          - llvm-15.0.2
          - gcc-12.1.0
        generator:
          - "Ninja Multi-Config"
        include:
          - compiler: gcc-12.1.0
            gcov_executable: gcov

          - compiler: llvm-15.0.2
            gcov_executable: "llvm-cov gcov"

          # Set up preferred package generators, for given build configurations
          - build_type: Release
            package_generator: TBZ2

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          generator: ${{ matrix.generator }}

      - name: Setup Task
        uses: arduino/setup-task@v1

      - name: Setup Cpp
        uses: aminya/setup-cpp@v0.21.0
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows') }}

          cmake: true
          ninja: true
          conan: true
          vcpkg: false
          ccache: true
          clangtidy: "15.0.2"
          cppcheck: true
          gcovr: true
          opencppcoverage: true

      - name: Coverage
        run: |
          task coverage
        env:
          CMAKE_GENERATOR: ${{matrix.generator}}
          GCOV_EXECUTABLE: ${{matrix.gcov_executable}}

      - name: Debug Tests
        run: |
          task test-debug
        env:
          CMAKE_GENERATOR: ${{matrix.generator}}

      - name: Release Tests
        run: |
          task test-release
        env:
          CMAKE_GENERATOR: ${{matrix.generator}}

      - name: Install
        run: |
          task install
        env:
          CMAKE_GENERATOR: ${{matrix.generator}}
          CPACK_GENERATOR: ${{matrix.package_generator}}

      - name: Publish to Codecov
        uses: codecov/codecov-action@v3.1.1
        with:
          flags: ${{ runner.os }}, ${{ matrix.compiler }}
          name: ${{ runner.os }}-${{ matrix.compiler }}-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./build/coverage.xml